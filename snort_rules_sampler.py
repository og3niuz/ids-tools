#!/usr/bin/python
#This release does not work on flowbits over default group.
#Authors: Sabin G., Radu L.
#Release: 0.75 / June 2017 

import sys, getopt, os
import re
import random
from datetime import date
sys.path.append("../")
from utils import *

rpath = "/etc/snort/rules/"
ofile = "sample.rules"
rdb = {}
rtotal = 0
rsamples = []


def getrulestates(rule):
	#state = re.match('.*flowbits\s*:\s*(isset|isnotset|set|setx|unset|toggle|reset|noalert)\s*[,;]\s*'\
	#			'(all|any|bit[0-9]\s*[\|&])*([a-zA-Z0-9_\.]+\s*;)?.*', line)
	flowbits = re.findall('flowbits\s*:\s*(isset|isnotset|set|setx|unset|toggle|reset|noalert)'\
		'(\s*,\s*all|\s*,\s*any)?(\s*[,]?\s*bit[0-9]\s*[\|&])*(\s*,\s*[a-zA-Z0-9_\.]+)?\s*;', rule)
	if flowbits:
		return set([flowbits[i][3][1:] for i in xrange(len(flowbits))])
	return set() 




try:
	opts, args = getopt.getopt(sys.argv[1:], "hf:n:o:")
except getopt.GetoptError:
	print "Usage:", sys.argv[0], "{-h, -f <path to the rules files folder>/, -n <#rules>, -o <output>}\n"
	sys.exit(1)

for opt, arg in opts:
	if opt == "-h":
		print "Usage:",sys.argv[0],"{-h, -f <path to the rules files folder>/, -n <#rules>, -o <output>}\n"
		sys.exit(1)
	elif opt == "-f":
		rpath = arg
	elif opt == "-n":
		rtotal = int(arg)
	elif opt == "-o":
		ofile = arg

if rtotal == 0:
	print "Nothing to do here. Please retry with -n arg.\n"
	sys.exit(1)

#open given directory and preprocess ALL rules files
for root, dirs, files in os.walk(rpath):
	for file in files:
		if file.endswith(".rules"):
			print "check out:", file, "file ..."

			with open(rpath+"/"+file) as input:
				cnt = 0
				for line in input:
					if not re.match('\s*[#]+.*\r?\n', line) and not re.match('\s*\r?\n', line):
						cnt = cnt + 1
						#print line
					else:
						print "\tempty or commented out line omitted."
				print "\n\t", cnt, "active rules found."
				rdb[rpath+"/"+file] = cnt	
				rsamples.append([])

#check out whether enough rules in database(folder)
if rtotal > sum(rdb.values()):
	print "Couldn't sample", rtotal, "rules from database(only", sum(rdb.values()), "rules).\n"
	sys.exit(1)


print "\nstart sampling from:", sum(rdb.values()), "rules..."
print "\trdb content is:", rdb, "\n"


with open(ofile, 'w') as output:
	output.write("#This file is automatically generated by snort rules sampler application.\n")
	output.write("#Date: "+str(date.today())+"\n\n")

	total = 0	
	while total < rtotal:
		#choose random file from dict
		file = random.choice(rdb.keys())

		#randomly choose a file iff there are still rules, left
		if len(range(1,rdb[file]+1)) == len(rsamples[rdb.keys().index(file)]): 
			continue
		#choose random rule from file, except the ones already selected
		index = random.choice(list(set(range(1,rdb[file]+1)) -set(rsamples[rdb.keys().index(file)])) )
		#rsamples[rdb.keys().index(file)].append(index)

		sys.stdout.write(GREEN)
		print "\tfrom file", file, ": selected the rule no. ", index, "out of", rdb[file],"rules"
		sys.stdout.write(RESET)

		#goto selected rule
		with open(file) as input:
			cnt = 0
			states = set()
			mlr = 0 
			rules = ""

			while True:
				for line in input:
					if not re.match('\s*[#]+.*\r?\n', line) and not re.match('\s*\r?\n', line):
						cnt = cnt + 1
					else:
						continue

					if cnt not in rsamples[rdb.keys().index(file)]:
						if cnt == index:
							rules = rules + line
							total = total + 1
							rsamples[rdb.keys().index(file)].append(cnt)
							if getrulestates(line):
								states = states.union(getrulestates(line))
								states.discard('')
								print "multiple-lines rule found(states=", states, ").Looking for correlated rules ..." 
								mlr = 1
								continue	
							mlr = 0
							break
						if getrulestates(line):
							if getrulestates(line).intersection(states):
								rules = rules + line
								total = total + 1
								rsamples[rdb.keys().index(file)].append(cnt)
								states = states.union(getrulestates(line))
								states.discard('')
								mlr = 1
								print "\t+correlated rule added(states=", states, " progress=%.1f" % round(100*float(cnt)/rdb[file], 2), "%)."

				if mlr:
					input.seek(0, 0)
					cnt = 0
					mlr = 0
					sys.stdout.write(YELLOW)
					print "rewind and check out for more rules w/ related flowbits."
					sys.stdout.write(RESET)
				else:
					break
					
			print rules
			output.write(rules)
			print "\trules sel'd from this file:", rsamples[rdb.keys().index(file)]
			print "\ttotal rules sel'd:", total, "\n"
			del states

	print "sample size:", total


if __name__ == "__main__":
	pass
